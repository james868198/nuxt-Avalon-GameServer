#!/usr/bin/env node

/**
 * Module dependencies.
 */


import config from '../configs/dev.js';
import app from '../app';

import socketRoot from '../socketRoutes/index';
import GameStore from '../utils/game/gameStore';
import redisClient from "../lib/redisClient"

// import rediscli from '../utils/redis/client';
import Socket from 'socket.io';
import http from 'http';
import consola from 'consola';
import debug from 'debug';
debug('gameserver:server');

/**
 * using dev config
 */

const redis = new redisClient()
const port = normalizePort(process.env.PORT || config.port);
const host = config.host || '127.0.0.1';

app.set('port', port);

const server = http.createServer(app);
const database = new GameStore();

consola.success("database built");

const runSocket = () => {
 
  // Listen the server
  server.listen(port, host);
  server.on('error', onError);
  server.on('listening', onListening);
  consola.ready({
      message: `Server listening on http://${host}:${port}`,
      badge: true
  })

  const io = Socket(server);
  socketRoot(io,redis,database);
}
runSocket();
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

